// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nio_flash.proto

#include "nio_flash.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace nio_flash {
PROTOBUF_CONSTEXPR Configure_FlashPackage::Configure_FlashPackage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flash_gate_)*/{}
  , /*decltype(_impl_.switch_gate_)*/{}
  , /*decltype(_impl_.file_list_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.software_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hardware_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_type_)*/0
  , /*decltype(_impl_.flash_type_)*/0
  , /*decltype(_impl_.is_skip_)*/false
  , /*decltype(_impl_.is_allow_fail_)*/false} {}
struct Configure_FlashPackageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Configure_FlashPackageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Configure_FlashPackageDefaultTypeInternal() {}
  union {
    Configure_FlashPackage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Configure_FlashPackageDefaultTypeInternal _Configure_FlashPackage_default_instance_;
PROTOBUF_CONSTEXPR Configure_FlashFile::Configure_FlashFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Configure_FlashFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Configure_FlashFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Configure_FlashFileDefaultTypeInternal() {}
  union {
    Configure_FlashFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Configure_FlashFileDefaultTypeInternal _Configure_FlashFile_default_instance_;
PROTOBUF_CONSTEXPR Configure::Configure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flash_package_)*/{}
  , /*decltype(_impl_.target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lib_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ConfigureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigureDefaultTypeInternal() {}
  union {
    Configure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigureDefaultTypeInternal _Configure_default_instance_;
}  // namespace nio_flash
static ::_pb::Metadata file_level_metadata_nio_5fflash_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nio_5fflash_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_nio_5fflash_2eproto = nullptr;

const uint32_t TableStruct_nio_5fflash_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.flash_gate_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.switch_gate_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.software_version_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.hardware_version_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.bundle_type_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.flash_type_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.is_skip_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.is_allow_fail_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashPackage, _impl_.file_list_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashFile, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashFile, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure_FlashFile, _impl_.hash_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure, _impl_.target_name_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure, _impl_.lib_name_),
  PROTOBUF_FIELD_OFFSET(::nio_flash::Configure, _impl_.flash_package_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::nio_flash::Configure_FlashPackage)},
  { 26, 35, -1, sizeof(::nio_flash::Configure_FlashFile)},
  { 38, 47, -1, sizeof(::nio_flash::Configure)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::nio_flash::_Configure_FlashPackage_default_instance_._instance,
  &::nio_flash::_Configure_FlashFile_default_instance_._instance,
  &::nio_flash::_Configure_default_instance_._instance,
};

const char descriptor_table_protodef_nio_5fflash_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017nio_flash.proto\022\tnio_flash\"\323\004\n\tConfigu"
  "re\022\023\n\013target_name\030\001 \001(\t\022\020\n\010lib_name\030\002 \001("
  "\t\0228\n\rflash_package\030\003 \003(\0132!.nio_flash.Con"
  "figure.FlashPackage\032\323\002\n\014FlashPackage\022\014\n\004"
  "name\030\001 \001(\t\022\022\n\nflash_gate\030\002 \003(\t\022\023\n\013switch"
  "_gate\030\003 \003(\t\022\030\n\020software_version\030\004 \001(\t\022\030\n"
  "\020hardware_version\030\005 \001(\t\022;\n\013bundle_type\030\006"
  " \001(\0162\037.nio_flash.Configure.BundleType:\005k"
  "Full\0222\n\nflash_type\030\007 \001(\0162\036.nio_flash.Con"
  "figure.FlashType\022\026\n\007is_skip\030\010 \001(\010:\005false"
  "\022\034\n\ris_allow_fail\030\t \001(\010:\005false\0221\n\tfile_l"
  "ist\030\n \003(\0132\036.nio_flash.Configure.FlashFil"
  "e\0325\n\tFlashFile\022\014\n\004type\030\001 \001(\t\022\014\n\004path\030\002 \001"
  "(\t\022\014\n\004hash\030\003 \001(\t\"4\n\tFlashType\022\010\n\004kAll\020\000\022"
  "\014\n\010kSilence\020\001\022\017\n\013kNonSilence\020\002\"\"\n\nBundle"
  "Type\022\t\n\005kFull\020\000\022\t\n\005kDiff\020\001"
  ;
static ::_pbi::once_flag descriptor_table_nio_5fflash_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nio_5fflash_2eproto = {
    false, false, 626, descriptor_table_protodef_nio_5fflash_2eproto,
    "nio_flash.proto",
    &descriptor_table_nio_5fflash_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_nio_5fflash_2eproto::offsets,
    file_level_metadata_nio_5fflash_2eproto, file_level_enum_descriptors_nio_5fflash_2eproto,
    file_level_service_descriptors_nio_5fflash_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nio_5fflash_2eproto_getter() {
  return &descriptor_table_nio_5fflash_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_nio_5fflash_2eproto(&descriptor_table_nio_5fflash_2eproto);
namespace nio_flash {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configure_FlashType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nio_5fflash_2eproto);
  return file_level_enum_descriptors_nio_5fflash_2eproto[0];
}
bool Configure_FlashType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configure_FlashType Configure::kAll;
constexpr Configure_FlashType Configure::kSilence;
constexpr Configure_FlashType Configure::kNonSilence;
constexpr Configure_FlashType Configure::FlashType_MIN;
constexpr Configure_FlashType Configure::FlashType_MAX;
constexpr int Configure::FlashType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configure_BundleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nio_5fflash_2eproto);
  return file_level_enum_descriptors_nio_5fflash_2eproto[1];
}
bool Configure_BundleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Configure_BundleType Configure::kFull;
constexpr Configure_BundleType Configure::kDiff;
constexpr Configure_BundleType Configure::BundleType_MIN;
constexpr Configure_BundleType Configure::BundleType_MAX;
constexpr int Configure::BundleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Configure_FlashPackage::_Internal {
 public:
  using HasBits = decltype(std::declval<Configure_FlashPackage>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_software_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hardware_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bundle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flash_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_allow_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Configure_FlashPackage::Configure_FlashPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nio_flash.Configure.FlashPackage)
}
Configure_FlashPackage::Configure_FlashPackage(const Configure_FlashPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configure_FlashPackage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flash_gate_){from._impl_.flash_gate_}
    , decltype(_impl_.switch_gate_){from._impl_.switch_gate_}
    , decltype(_impl_.file_list_){from._impl_.file_list_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.software_version_){}
    , decltype(_impl_.hardware_version_){}
    , decltype(_impl_.bundle_type_){}
    , decltype(_impl_.flash_type_){}
    , decltype(_impl_.is_skip_){}
    , decltype(_impl_.is_allow_fail_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.software_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.software_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_software_version()) {
    _this->_impl_.software_version_.Set(from._internal_software_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hardware_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardware_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hardware_version()) {
    _this->_impl_.hardware_version_.Set(from._internal_hardware_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bundle_type_, &from._impl_.bundle_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_allow_fail_) -
    reinterpret_cast<char*>(&_impl_.bundle_type_)) + sizeof(_impl_.is_allow_fail_));
  // @@protoc_insertion_point(copy_constructor:nio_flash.Configure.FlashPackage)
}

inline void Configure_FlashPackage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flash_gate_){arena}
    , decltype(_impl_.switch_gate_){arena}
    , decltype(_impl_.file_list_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.software_version_){}
    , decltype(_impl_.hardware_version_){}
    , decltype(_impl_.bundle_type_){0}
    , decltype(_impl_.flash_type_){0}
    , decltype(_impl_.is_skip_){false}
    , decltype(_impl_.is_allow_fail_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.software_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.software_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hardware_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardware_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Configure_FlashPackage::~Configure_FlashPackage() {
  // @@protoc_insertion_point(destructor:nio_flash.Configure.FlashPackage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configure_FlashPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flash_gate_.~RepeatedPtrField();
  _impl_.switch_gate_.~RepeatedPtrField();
  _impl_.file_list_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.software_version_.Destroy();
  _impl_.hardware_version_.Destroy();
}

void Configure_FlashPackage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configure_FlashPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:nio_flash.Configure.FlashPackage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flash_gate_.Clear();
  _impl_.switch_gate_.Clear();
  _impl_.file_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.software_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hardware_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.bundle_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_allow_fail_) -
        reinterpret_cast<char*>(&_impl_.bundle_type_)) + sizeof(_impl_.is_allow_fail_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configure_FlashPackage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashPackage.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string flash_gate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_flash_gate();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashPackage.flash_gate");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string switch_gate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_switch_gate();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashPackage.switch_gate");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string software_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_software_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashPackage.software_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hardware_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hardware_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashPackage.hardware_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .nio_flash.Configure.BundleType bundle_type = 6 [default = kFull];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::nio_flash::Configure_BundleType_IsValid(val))) {
            _internal_set_bundle_type(static_cast<::nio_flash::Configure_BundleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .nio_flash.Configure.FlashType flash_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::nio_flash::Configure_FlashType_IsValid(val))) {
            _internal_set_flash_type(static_cast<::nio_flash::Configure_FlashType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_skip = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_skip(&has_bits);
          _impl_.is_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_allow_fail = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_allow_fail(&has_bits);
          _impl_.is_allow_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .nio_flash.Configure.FlashFile file_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configure_FlashPackage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nio_flash.Configure.FlashPackage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashPackage.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string flash_gate = 2;
  for (int i = 0, n = this->_internal_flash_gate_size(); i < n; i++) {
    const auto& s = this->_internal_flash_gate(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashPackage.flash_gate");
    target = stream->WriteString(2, s, target);
  }

  // repeated string switch_gate = 3;
  for (int i = 0, n = this->_internal_switch_gate_size(); i < n; i++) {
    const auto& s = this->_internal_switch_gate(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashPackage.switch_gate");
    target = stream->WriteString(3, s, target);
  }

  // optional string software_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_software_version().data(), static_cast<int>(this->_internal_software_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashPackage.software_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_software_version(), target);
  }

  // optional string hardware_version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hardware_version().data(), static_cast<int>(this->_internal_hardware_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashPackage.hardware_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hardware_version(), target);
  }

  // optional .nio_flash.Configure.BundleType bundle_type = 6 [default = kFull];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_bundle_type(), target);
  }

  // optional .nio_flash.Configure.FlashType flash_type = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_flash_type(), target);
  }

  // optional bool is_skip = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_skip(), target);
  }

  // optional bool is_allow_fail = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_allow_fail(), target);
  }

  // repeated .nio_flash.Configure.FlashFile file_list = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nio_flash.Configure.FlashPackage)
  return target;
}

size_t Configure_FlashPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nio_flash.Configure.FlashPackage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string flash_gate = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.flash_gate_.size());
  for (int i = 0, n = _impl_.flash_gate_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.flash_gate_.Get(i));
  }

  // repeated string switch_gate = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.switch_gate_.size());
  for (int i = 0, n = _impl_.switch_gate_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.switch_gate_.Get(i));
  }

  // repeated .nio_flash.Configure.FlashFile file_list = 10;
  total_size += 1UL * this->_internal_file_list_size();
  for (const auto& msg : this->_impl_.file_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string software_version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_software_version());
    }

    // optional string hardware_version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hardware_version());
    }

    // optional .nio_flash.Configure.BundleType bundle_type = 6 [default = kFull];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bundle_type());
    }

    // optional .nio_flash.Configure.FlashType flash_type = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_flash_type());
    }

    // optional bool is_skip = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_allow_fail = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configure_FlashPackage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configure_FlashPackage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configure_FlashPackage::GetClassData() const { return &_class_data_; }


void Configure_FlashPackage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configure_FlashPackage*>(&to_msg);
  auto& from = static_cast<const Configure_FlashPackage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nio_flash.Configure.FlashPackage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.flash_gate_.MergeFrom(from._impl_.flash_gate_);
  _this->_impl_.switch_gate_.MergeFrom(from._impl_.switch_gate_);
  _this->_impl_.file_list_.MergeFrom(from._impl_.file_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_software_version(from._internal_software_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_hardware_version(from._internal_hardware_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bundle_type_ = from._impl_.bundle_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flash_type_ = from._impl_.flash_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_skip_ = from._impl_.is_skip_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_allow_fail_ = from._impl_.is_allow_fail_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configure_FlashPackage::CopyFrom(const Configure_FlashPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nio_flash.Configure.FlashPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure_FlashPackage::IsInitialized() const {
  return true;
}

void Configure_FlashPackage::InternalSwap(Configure_FlashPackage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.flash_gate_.InternalSwap(&other->_impl_.flash_gate_);
  _impl_.switch_gate_.InternalSwap(&other->_impl_.switch_gate_);
  _impl_.file_list_.InternalSwap(&other->_impl_.file_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.software_version_, lhs_arena,
      &other->_impl_.software_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hardware_version_, lhs_arena,
      &other->_impl_.hardware_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configure_FlashPackage, _impl_.is_allow_fail_)
      + sizeof(Configure_FlashPackage::_impl_.is_allow_fail_)
      - PROTOBUF_FIELD_OFFSET(Configure_FlashPackage, _impl_.bundle_type_)>(
          reinterpret_cast<char*>(&_impl_.bundle_type_),
          reinterpret_cast<char*>(&other->_impl_.bundle_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configure_FlashPackage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nio_5fflash_2eproto_getter, &descriptor_table_nio_5fflash_2eproto_once,
      file_level_metadata_nio_5fflash_2eproto[0]);
}

// ===================================================================

class Configure_FlashFile::_Internal {
 public:
  using HasBits = decltype(std::declval<Configure_FlashFile>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Configure_FlashFile::Configure_FlashFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nio_flash.Configure.FlashFile)
}
Configure_FlashFile::Configure_FlashFile(const Configure_FlashFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configure_FlashFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hash_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nio_flash.Configure.FlashFile)
}

inline void Configure_FlashFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hash_){}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Configure_FlashFile::~Configure_FlashFile() {
  // @@protoc_insertion_point(destructor:nio_flash.Configure.FlashFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configure_FlashFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.path_.Destroy();
  _impl_.hash_.Destroy();
}

void Configure_FlashFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configure_FlashFile::Clear() {
// @@protoc_insertion_point(message_clear_start:nio_flash.Configure.FlashFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hash_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configure_FlashFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashFile.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashFile.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.FlashFile.hash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configure_FlashFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nio_flash.Configure.FlashFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashFile.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashFile.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // optional string hash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.FlashFile.hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nio_flash.Configure.FlashFile)
  return target;
}

size_t Configure_FlashFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nio_flash.Configure.FlashFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string hash = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configure_FlashFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configure_FlashFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configure_FlashFile::GetClassData() const { return &_class_data_; }


void Configure_FlashFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configure_FlashFile*>(&to_msg);
  auto& from = static_cast<const Configure_FlashFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nio_flash.Configure.FlashFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_hash(from._internal_hash());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configure_FlashFile::CopyFrom(const Configure_FlashFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nio_flash.Configure.FlashFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure_FlashFile::IsInitialized() const {
  return true;
}

void Configure_FlashFile::InternalSwap(Configure_FlashFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Configure_FlashFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nio_5fflash_2eproto_getter, &descriptor_table_nio_5fflash_2eproto_once,
      file_level_metadata_nio_5fflash_2eproto[1]);
}

// ===================================================================

class Configure::_Internal {
 public:
  using HasBits = decltype(std::declval<Configure>()._impl_._has_bits_);
  static void set_has_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lib_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Configure::Configure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nio_flash.Configure)
}
Configure::Configure(const Configure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flash_package_){from._impl_.flash_package_}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.lib_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_name()) {
    _this->_impl_.target_name_.Set(from._internal_target_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lib_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lib_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lib_name()) {
    _this->_impl_.lib_name_.Set(from._internal_lib_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nio_flash.Configure)
}

inline void Configure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flash_package_){arena}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.lib_name_){}
  };
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lib_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lib_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:nio_flash.Configure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flash_package_.~RepeatedPtrField();
  _impl_.target_name_.Destroy();
  _impl_.lib_name_.Destroy();
}

void Configure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configure::Clear() {
// @@protoc_insertion_point(message_clear_start:nio_flash.Configure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flash_package_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lib_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string target_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.target_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string lib_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lib_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "nio_flash.Configure.lib_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .nio_flash.Configure.FlashPackage flash_package = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flash_package(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nio_flash.Configure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string target_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_name().data(), static_cast<int>(this->_internal_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.target_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_name(), target);
  }

  // optional string lib_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lib_name().data(), static_cast<int>(this->_internal_lib_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "nio_flash.Configure.lib_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lib_name(), target);
  }

  // repeated .nio_flash.Configure.FlashPackage flash_package = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_flash_package_size()); i < n; i++) {
    const auto& repfield = this->_internal_flash_package(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nio_flash.Configure)
  return target;
}

size_t Configure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nio_flash.Configure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nio_flash.Configure.FlashPackage flash_package = 3;
  total_size += 1UL * this->_internal_flash_package_size();
  for (const auto& msg : this->_impl_.flash_package_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string target_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_name());
    }

    // optional string lib_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lib_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configure::GetClassData() const { return &_class_data_; }


void Configure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configure*>(&to_msg);
  auto& from = static_cast<const Configure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nio_flash.Configure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.flash_package_.MergeFrom(from._impl_.flash_package_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target_name(from._internal_target_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_lib_name(from._internal_lib_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configure::CopyFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nio_flash.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {
  return true;
}

void Configure::InternalSwap(Configure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.flash_package_.InternalSwap(&other->_impl_.flash_package_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_name_, lhs_arena,
      &other->_impl_.target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lib_name_, lhs_arena,
      &other->_impl_.lib_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Configure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nio_5fflash_2eproto_getter, &descriptor_table_nio_5fflash_2eproto_once,
      file_level_metadata_nio_5fflash_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace nio_flash
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nio_flash::Configure_FlashPackage*
Arena::CreateMaybeMessage< ::nio_flash::Configure_FlashPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nio_flash::Configure_FlashPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::nio_flash::Configure_FlashFile*
Arena::CreateMaybeMessage< ::nio_flash::Configure_FlashFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nio_flash::Configure_FlashFile >(arena);
}
template<> PROTOBUF_NOINLINE ::nio_flash::Configure*
Arena::CreateMaybeMessage< ::nio_flash::Configure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nio_flash::Configure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
