// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nio_flash.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nio_5fflash_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nio_5fflash_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nio_5fflash_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nio_5fflash_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nio_5fflash_2eproto;
namespace nio_flash {
class Configure;
struct ConfigureDefaultTypeInternal;
extern ConfigureDefaultTypeInternal _Configure_default_instance_;
class Configure_FlashFile;
struct Configure_FlashFileDefaultTypeInternal;
extern Configure_FlashFileDefaultTypeInternal _Configure_FlashFile_default_instance_;
class Configure_FlashPackage;
struct Configure_FlashPackageDefaultTypeInternal;
extern Configure_FlashPackageDefaultTypeInternal _Configure_FlashPackage_default_instance_;
}  // namespace nio_flash
PROTOBUF_NAMESPACE_OPEN
template<> ::nio_flash::Configure* Arena::CreateMaybeMessage<::nio_flash::Configure>(Arena*);
template<> ::nio_flash::Configure_FlashFile* Arena::CreateMaybeMessage<::nio_flash::Configure_FlashFile>(Arena*);
template<> ::nio_flash::Configure_FlashPackage* Arena::CreateMaybeMessage<::nio_flash::Configure_FlashPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nio_flash {

enum Configure_FlashType : int {
  Configure_FlashType_kAll = 0,
  Configure_FlashType_kSilence = 1,
  Configure_FlashType_kNonSilence = 2
};
bool Configure_FlashType_IsValid(int value);
constexpr Configure_FlashType Configure_FlashType_FlashType_MIN = Configure_FlashType_kAll;
constexpr Configure_FlashType Configure_FlashType_FlashType_MAX = Configure_FlashType_kNonSilence;
constexpr int Configure_FlashType_FlashType_ARRAYSIZE = Configure_FlashType_FlashType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configure_FlashType_descriptor();
template<typename T>
inline const std::string& Configure_FlashType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Configure_FlashType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Configure_FlashType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Configure_FlashType_descriptor(), enum_t_value);
}
inline bool Configure_FlashType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Configure_FlashType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Configure_FlashType>(
    Configure_FlashType_descriptor(), name, value);
}
enum Configure_BundleType : int {
  Configure_BundleType_kFull = 0,
  Configure_BundleType_kDiff = 1
};
bool Configure_BundleType_IsValid(int value);
constexpr Configure_BundleType Configure_BundleType_BundleType_MIN = Configure_BundleType_kFull;
constexpr Configure_BundleType Configure_BundleType_BundleType_MAX = Configure_BundleType_kDiff;
constexpr int Configure_BundleType_BundleType_ARRAYSIZE = Configure_BundleType_BundleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configure_BundleType_descriptor();
template<typename T>
inline const std::string& Configure_BundleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Configure_BundleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Configure_BundleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Configure_BundleType_descriptor(), enum_t_value);
}
inline bool Configure_BundleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Configure_BundleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Configure_BundleType>(
    Configure_BundleType_descriptor(), name, value);
}
// ===================================================================

class Configure_FlashPackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nio_flash.Configure.FlashPackage) */ {
 public:
  inline Configure_FlashPackage() : Configure_FlashPackage(nullptr) {}
  ~Configure_FlashPackage() override;
  explicit PROTOBUF_CONSTEXPR Configure_FlashPackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configure_FlashPackage(const Configure_FlashPackage& from);
  Configure_FlashPackage(Configure_FlashPackage&& from) noexcept
    : Configure_FlashPackage() {
    *this = ::std::move(from);
  }

  inline Configure_FlashPackage& operator=(const Configure_FlashPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configure_FlashPackage& operator=(Configure_FlashPackage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configure_FlashPackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configure_FlashPackage* internal_default_instance() {
    return reinterpret_cast<const Configure_FlashPackage*>(
               &_Configure_FlashPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Configure_FlashPackage& a, Configure_FlashPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(Configure_FlashPackage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configure_FlashPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configure_FlashPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configure_FlashPackage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configure_FlashPackage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Configure_FlashPackage& from) {
    Configure_FlashPackage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configure_FlashPackage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nio_flash.Configure.FlashPackage";
  }
  protected:
  explicit Configure_FlashPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlashGateFieldNumber = 2,
    kSwitchGateFieldNumber = 3,
    kFileListFieldNumber = 10,
    kNameFieldNumber = 1,
    kSoftwareVersionFieldNumber = 4,
    kHardwareVersionFieldNumber = 5,
    kBundleTypeFieldNumber = 6,
    kFlashTypeFieldNumber = 7,
    kIsSkipFieldNumber = 8,
    kIsAllowFailFieldNumber = 9,
  };
  // repeated string flash_gate = 2;
  int flash_gate_size() const;
  private:
  int _internal_flash_gate_size() const;
  public:
  void clear_flash_gate();
  const std::string& flash_gate(int index) const;
  std::string* mutable_flash_gate(int index);
  void set_flash_gate(int index, const std::string& value);
  void set_flash_gate(int index, std::string&& value);
  void set_flash_gate(int index, const char* value);
  void set_flash_gate(int index, const char* value, size_t size);
  std::string* add_flash_gate();
  void add_flash_gate(const std::string& value);
  void add_flash_gate(std::string&& value);
  void add_flash_gate(const char* value);
  void add_flash_gate(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& flash_gate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_flash_gate();
  private:
  const std::string& _internal_flash_gate(int index) const;
  std::string* _internal_add_flash_gate();
  public:

  // repeated string switch_gate = 3;
  int switch_gate_size() const;
  private:
  int _internal_switch_gate_size() const;
  public:
  void clear_switch_gate();
  const std::string& switch_gate(int index) const;
  std::string* mutable_switch_gate(int index);
  void set_switch_gate(int index, const std::string& value);
  void set_switch_gate(int index, std::string&& value);
  void set_switch_gate(int index, const char* value);
  void set_switch_gate(int index, const char* value, size_t size);
  std::string* add_switch_gate();
  void add_switch_gate(const std::string& value);
  void add_switch_gate(std::string&& value);
  void add_switch_gate(const char* value);
  void add_switch_gate(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& switch_gate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_switch_gate();
  private:
  const std::string& _internal_switch_gate(int index) const;
  std::string* _internal_add_switch_gate();
  public:

  // repeated .nio_flash.Configure.FlashFile file_list = 10;
  int file_list_size() const;
  private:
  int _internal_file_list_size() const;
  public:
  void clear_file_list();
  ::nio_flash::Configure_FlashFile* mutable_file_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashFile >*
      mutable_file_list();
  private:
  const ::nio_flash::Configure_FlashFile& _internal_file_list(int index) const;
  ::nio_flash::Configure_FlashFile* _internal_add_file_list();
  public:
  const ::nio_flash::Configure_FlashFile& file_list(int index) const;
  ::nio_flash::Configure_FlashFile* add_file_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashFile >&
      file_list() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string software_version = 4;
  bool has_software_version() const;
  private:
  bool _internal_has_software_version() const;
  public:
  void clear_software_version();
  const std::string& software_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_software_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_software_version();
  PROTOBUF_NODISCARD std::string* release_software_version();
  void set_allocated_software_version(std::string* software_version);
  private:
  const std::string& _internal_software_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_software_version(const std::string& value);
  std::string* _internal_mutable_software_version();
  public:

  // optional string hardware_version = 5;
  bool has_hardware_version() const;
  private:
  bool _internal_has_hardware_version() const;
  public:
  void clear_hardware_version();
  const std::string& hardware_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hardware_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hardware_version();
  PROTOBUF_NODISCARD std::string* release_hardware_version();
  void set_allocated_hardware_version(std::string* hardware_version);
  private:
  const std::string& _internal_hardware_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hardware_version(const std::string& value);
  std::string* _internal_mutable_hardware_version();
  public:

  // optional .nio_flash.Configure.BundleType bundle_type = 6 [default = kFull];
  bool has_bundle_type() const;
  private:
  bool _internal_has_bundle_type() const;
  public:
  void clear_bundle_type();
  ::nio_flash::Configure_BundleType bundle_type() const;
  void set_bundle_type(::nio_flash::Configure_BundleType value);
  private:
  ::nio_flash::Configure_BundleType _internal_bundle_type() const;
  void _internal_set_bundle_type(::nio_flash::Configure_BundleType value);
  public:

  // optional .nio_flash.Configure.FlashType flash_type = 7;
  bool has_flash_type() const;
  private:
  bool _internal_has_flash_type() const;
  public:
  void clear_flash_type();
  ::nio_flash::Configure_FlashType flash_type() const;
  void set_flash_type(::nio_flash::Configure_FlashType value);
  private:
  ::nio_flash::Configure_FlashType _internal_flash_type() const;
  void _internal_set_flash_type(::nio_flash::Configure_FlashType value);
  public:

  // optional bool is_skip = 8 [default = false];
  bool has_is_skip() const;
  private:
  bool _internal_has_is_skip() const;
  public:
  void clear_is_skip();
  bool is_skip() const;
  void set_is_skip(bool value);
  private:
  bool _internal_is_skip() const;
  void _internal_set_is_skip(bool value);
  public:

  // optional bool is_allow_fail = 9 [default = false];
  bool has_is_allow_fail() const;
  private:
  bool _internal_has_is_allow_fail() const;
  public:
  void clear_is_allow_fail();
  bool is_allow_fail() const;
  void set_is_allow_fail(bool value);
  private:
  bool _internal_is_allow_fail() const;
  void _internal_set_is_allow_fail(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nio_flash.Configure.FlashPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> flash_gate_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> switch_gate_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashFile > file_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr software_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardware_version_;
    int bundle_type_;
    int flash_type_;
    bool is_skip_;
    bool is_allow_fail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nio_5fflash_2eproto;
};
// -------------------------------------------------------------------

class Configure_FlashFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nio_flash.Configure.FlashFile) */ {
 public:
  inline Configure_FlashFile() : Configure_FlashFile(nullptr) {}
  ~Configure_FlashFile() override;
  explicit PROTOBUF_CONSTEXPR Configure_FlashFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configure_FlashFile(const Configure_FlashFile& from);
  Configure_FlashFile(Configure_FlashFile&& from) noexcept
    : Configure_FlashFile() {
    *this = ::std::move(from);
  }

  inline Configure_FlashFile& operator=(const Configure_FlashFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configure_FlashFile& operator=(Configure_FlashFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configure_FlashFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configure_FlashFile* internal_default_instance() {
    return reinterpret_cast<const Configure_FlashFile*>(
               &_Configure_FlashFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Configure_FlashFile& a, Configure_FlashFile& b) {
    a.Swap(&b);
  }
  inline void Swap(Configure_FlashFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configure_FlashFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configure_FlashFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configure_FlashFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configure_FlashFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Configure_FlashFile& from) {
    Configure_FlashFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configure_FlashFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nio_flash.Configure.FlashFile";
  }
  protected:
  explicit Configure_FlashFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPathFieldNumber = 2,
    kHashFieldNumber = 3,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string hash = 3;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:nio_flash.Configure.FlashFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nio_5fflash_2eproto;
};
// -------------------------------------------------------------------

class Configure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nio_flash.Configure) */ {
 public:
  inline Configure() : Configure(nullptr) {}
  ~Configure() override;
  explicit PROTOBUF_CONSTEXPR Configure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configure(const Configure& from);
  Configure(Configure&& from) noexcept
    : Configure() {
    *this = ::std::move(from);
  }

  inline Configure& operator=(const Configure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configure& operator=(Configure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configure* internal_default_instance() {
    return reinterpret_cast<const Configure*>(
               &_Configure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Configure& a, Configure& b) {
    a.Swap(&b);
  }
  inline void Swap(Configure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Configure& from) {
    Configure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nio_flash.Configure";
  }
  protected:
  explicit Configure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Configure_FlashPackage FlashPackage;
  typedef Configure_FlashFile FlashFile;

  typedef Configure_FlashType FlashType;
  static constexpr FlashType kAll =
    Configure_FlashType_kAll;
  static constexpr FlashType kSilence =
    Configure_FlashType_kSilence;
  static constexpr FlashType kNonSilence =
    Configure_FlashType_kNonSilence;
  static inline bool FlashType_IsValid(int value) {
    return Configure_FlashType_IsValid(value);
  }
  static constexpr FlashType FlashType_MIN =
    Configure_FlashType_FlashType_MIN;
  static constexpr FlashType FlashType_MAX =
    Configure_FlashType_FlashType_MAX;
  static constexpr int FlashType_ARRAYSIZE =
    Configure_FlashType_FlashType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FlashType_descriptor() {
    return Configure_FlashType_descriptor();
  }
  template<typename T>
  static inline const std::string& FlashType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FlashType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FlashType_Name.");
    return Configure_FlashType_Name(enum_t_value);
  }
  static inline bool FlashType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FlashType* value) {
    return Configure_FlashType_Parse(name, value);
  }

  typedef Configure_BundleType BundleType;
  static constexpr BundleType kFull =
    Configure_BundleType_kFull;
  static constexpr BundleType kDiff =
    Configure_BundleType_kDiff;
  static inline bool BundleType_IsValid(int value) {
    return Configure_BundleType_IsValid(value);
  }
  static constexpr BundleType BundleType_MIN =
    Configure_BundleType_BundleType_MIN;
  static constexpr BundleType BundleType_MAX =
    Configure_BundleType_BundleType_MAX;
  static constexpr int BundleType_ARRAYSIZE =
    Configure_BundleType_BundleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BundleType_descriptor() {
    return Configure_BundleType_descriptor();
  }
  template<typename T>
  static inline const std::string& BundleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BundleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BundleType_Name.");
    return Configure_BundleType_Name(enum_t_value);
  }
  static inline bool BundleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BundleType* value) {
    return Configure_BundleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFlashPackageFieldNumber = 3,
    kTargetNameFieldNumber = 1,
    kLibNameFieldNumber = 2,
  };
  // repeated .nio_flash.Configure.FlashPackage flash_package = 3;
  int flash_package_size() const;
  private:
  int _internal_flash_package_size() const;
  public:
  void clear_flash_package();
  ::nio_flash::Configure_FlashPackage* mutable_flash_package(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashPackage >*
      mutable_flash_package();
  private:
  const ::nio_flash::Configure_FlashPackage& _internal_flash_package(int index) const;
  ::nio_flash::Configure_FlashPackage* _internal_add_flash_package();
  public:
  const ::nio_flash::Configure_FlashPackage& flash_package(int index) const;
  ::nio_flash::Configure_FlashPackage* add_flash_package();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashPackage >&
      flash_package() const;

  // optional string target_name = 1;
  bool has_target_name() const;
  private:
  bool _internal_has_target_name() const;
  public:
  void clear_target_name();
  const std::string& target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name();
  PROTOBUF_NODISCARD std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // optional string lib_name = 2;
  bool has_lib_name() const;
  private:
  bool _internal_has_lib_name() const;
  public:
  void clear_lib_name();
  const std::string& lib_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lib_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lib_name();
  PROTOBUF_NODISCARD std::string* release_lib_name();
  void set_allocated_lib_name(std::string* lib_name);
  private:
  const std::string& _internal_lib_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lib_name(const std::string& value);
  std::string* _internal_mutable_lib_name();
  public:

  // @@protoc_insertion_point(class_scope:nio_flash.Configure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashPackage > flash_package_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lib_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nio_5fflash_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Configure_FlashPackage

// optional string name = 1;
inline bool Configure_FlashPackage::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_name() const {
  return _internal_has_name();
}
inline void Configure_FlashPackage::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Configure_FlashPackage::name() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure_FlashPackage::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.name)
}
inline std::string* Configure_FlashPackage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashPackage.name)
  return _s;
}
inline const std::string& Configure_FlashPackage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Configure_FlashPackage::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure_FlashPackage::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure_FlashPackage::release_name() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.FlashPackage.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure_FlashPackage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.FlashPackage.name)
}

// repeated string flash_gate = 2;
inline int Configure_FlashPackage::_internal_flash_gate_size() const {
  return _impl_.flash_gate_.size();
}
inline int Configure_FlashPackage::flash_gate_size() const {
  return _internal_flash_gate_size();
}
inline void Configure_FlashPackage::clear_flash_gate() {
  _impl_.flash_gate_.Clear();
}
inline std::string* Configure_FlashPackage::add_flash_gate() {
  std::string* _s = _internal_add_flash_gate();
  // @@protoc_insertion_point(field_add_mutable:nio_flash.Configure.FlashPackage.flash_gate)
  return _s;
}
inline const std::string& Configure_FlashPackage::_internal_flash_gate(int index) const {
  return _impl_.flash_gate_.Get(index);
}
inline const std::string& Configure_FlashPackage::flash_gate(int index) const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.flash_gate)
  return _internal_flash_gate(index);
}
inline std::string* Configure_FlashPackage::mutable_flash_gate(int index) {
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashPackage.flash_gate)
  return _impl_.flash_gate_.Mutable(index);
}
inline void Configure_FlashPackage::set_flash_gate(int index, const std::string& value) {
  _impl_.flash_gate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.flash_gate)
}
inline void Configure_FlashPackage::set_flash_gate(int index, std::string&& value) {
  _impl_.flash_gate_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.flash_gate)
}
inline void Configure_FlashPackage::set_flash_gate(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.flash_gate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nio_flash.Configure.FlashPackage.flash_gate)
}
inline void Configure_FlashPackage::set_flash_gate(int index, const char* value, size_t size) {
  _impl_.flash_gate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nio_flash.Configure.FlashPackage.flash_gate)
}
inline std::string* Configure_FlashPackage::_internal_add_flash_gate() {
  return _impl_.flash_gate_.Add();
}
inline void Configure_FlashPackage::add_flash_gate(const std::string& value) {
  _impl_.flash_gate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nio_flash.Configure.FlashPackage.flash_gate)
}
inline void Configure_FlashPackage::add_flash_gate(std::string&& value) {
  _impl_.flash_gate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nio_flash.Configure.FlashPackage.flash_gate)
}
inline void Configure_FlashPackage::add_flash_gate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.flash_gate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nio_flash.Configure.FlashPackage.flash_gate)
}
inline void Configure_FlashPackage::add_flash_gate(const char* value, size_t size) {
  _impl_.flash_gate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nio_flash.Configure.FlashPackage.flash_gate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Configure_FlashPackage::flash_gate() const {
  // @@protoc_insertion_point(field_list:nio_flash.Configure.FlashPackage.flash_gate)
  return _impl_.flash_gate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Configure_FlashPackage::mutable_flash_gate() {
  // @@protoc_insertion_point(field_mutable_list:nio_flash.Configure.FlashPackage.flash_gate)
  return &_impl_.flash_gate_;
}

// repeated string switch_gate = 3;
inline int Configure_FlashPackage::_internal_switch_gate_size() const {
  return _impl_.switch_gate_.size();
}
inline int Configure_FlashPackage::switch_gate_size() const {
  return _internal_switch_gate_size();
}
inline void Configure_FlashPackage::clear_switch_gate() {
  _impl_.switch_gate_.Clear();
}
inline std::string* Configure_FlashPackage::add_switch_gate() {
  std::string* _s = _internal_add_switch_gate();
  // @@protoc_insertion_point(field_add_mutable:nio_flash.Configure.FlashPackage.switch_gate)
  return _s;
}
inline const std::string& Configure_FlashPackage::_internal_switch_gate(int index) const {
  return _impl_.switch_gate_.Get(index);
}
inline const std::string& Configure_FlashPackage::switch_gate(int index) const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.switch_gate)
  return _internal_switch_gate(index);
}
inline std::string* Configure_FlashPackage::mutable_switch_gate(int index) {
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashPackage.switch_gate)
  return _impl_.switch_gate_.Mutable(index);
}
inline void Configure_FlashPackage::set_switch_gate(int index, const std::string& value) {
  _impl_.switch_gate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.switch_gate)
}
inline void Configure_FlashPackage::set_switch_gate(int index, std::string&& value) {
  _impl_.switch_gate_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.switch_gate)
}
inline void Configure_FlashPackage::set_switch_gate(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.switch_gate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nio_flash.Configure.FlashPackage.switch_gate)
}
inline void Configure_FlashPackage::set_switch_gate(int index, const char* value, size_t size) {
  _impl_.switch_gate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nio_flash.Configure.FlashPackage.switch_gate)
}
inline std::string* Configure_FlashPackage::_internal_add_switch_gate() {
  return _impl_.switch_gate_.Add();
}
inline void Configure_FlashPackage::add_switch_gate(const std::string& value) {
  _impl_.switch_gate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nio_flash.Configure.FlashPackage.switch_gate)
}
inline void Configure_FlashPackage::add_switch_gate(std::string&& value) {
  _impl_.switch_gate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nio_flash.Configure.FlashPackage.switch_gate)
}
inline void Configure_FlashPackage::add_switch_gate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.switch_gate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nio_flash.Configure.FlashPackage.switch_gate)
}
inline void Configure_FlashPackage::add_switch_gate(const char* value, size_t size) {
  _impl_.switch_gate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nio_flash.Configure.FlashPackage.switch_gate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Configure_FlashPackage::switch_gate() const {
  // @@protoc_insertion_point(field_list:nio_flash.Configure.FlashPackage.switch_gate)
  return _impl_.switch_gate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Configure_FlashPackage::mutable_switch_gate() {
  // @@protoc_insertion_point(field_mutable_list:nio_flash.Configure.FlashPackage.switch_gate)
  return &_impl_.switch_gate_;
}

// optional string software_version = 4;
inline bool Configure_FlashPackage::_internal_has_software_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_software_version() const {
  return _internal_has_software_version();
}
inline void Configure_FlashPackage::clear_software_version() {
  _impl_.software_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Configure_FlashPackage::software_version() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.software_version)
  return _internal_software_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure_FlashPackage::set_software_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.software_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.software_version)
}
inline std::string* Configure_FlashPackage::mutable_software_version() {
  std::string* _s = _internal_mutable_software_version();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashPackage.software_version)
  return _s;
}
inline const std::string& Configure_FlashPackage::_internal_software_version() const {
  return _impl_.software_version_.Get();
}
inline void Configure_FlashPackage::_internal_set_software_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.software_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure_FlashPackage::_internal_mutable_software_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.software_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure_FlashPackage::release_software_version() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.FlashPackage.software_version)
  if (!_internal_has_software_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.software_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.software_version_.IsDefault()) {
    _impl_.software_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure_FlashPackage::set_allocated_software_version(std::string* software_version) {
  if (software_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.software_version_.SetAllocated(software_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.software_version_.IsDefault()) {
    _impl_.software_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.FlashPackage.software_version)
}

// optional string hardware_version = 5;
inline bool Configure_FlashPackage::_internal_has_hardware_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_hardware_version() const {
  return _internal_has_hardware_version();
}
inline void Configure_FlashPackage::clear_hardware_version() {
  _impl_.hardware_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Configure_FlashPackage::hardware_version() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.hardware_version)
  return _internal_hardware_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure_FlashPackage::set_hardware_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.hardware_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.hardware_version)
}
inline std::string* Configure_FlashPackage::mutable_hardware_version() {
  std::string* _s = _internal_mutable_hardware_version();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashPackage.hardware_version)
  return _s;
}
inline const std::string& Configure_FlashPackage::_internal_hardware_version() const {
  return _impl_.hardware_version_.Get();
}
inline void Configure_FlashPackage::_internal_set_hardware_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hardware_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure_FlashPackage::_internal_mutable_hardware_version() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.hardware_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure_FlashPackage::release_hardware_version() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.FlashPackage.hardware_version)
  if (!_internal_has_hardware_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.hardware_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hardware_version_.IsDefault()) {
    _impl_.hardware_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure_FlashPackage::set_allocated_hardware_version(std::string* hardware_version) {
  if (hardware_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.hardware_version_.SetAllocated(hardware_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hardware_version_.IsDefault()) {
    _impl_.hardware_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.FlashPackage.hardware_version)
}

// optional .nio_flash.Configure.BundleType bundle_type = 6 [default = kFull];
inline bool Configure_FlashPackage::_internal_has_bundle_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_bundle_type() const {
  return _internal_has_bundle_type();
}
inline void Configure_FlashPackage::clear_bundle_type() {
  _impl_.bundle_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::nio_flash::Configure_BundleType Configure_FlashPackage::_internal_bundle_type() const {
  return static_cast< ::nio_flash::Configure_BundleType >(_impl_.bundle_type_);
}
inline ::nio_flash::Configure_BundleType Configure_FlashPackage::bundle_type() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.bundle_type)
  return _internal_bundle_type();
}
inline void Configure_FlashPackage::_internal_set_bundle_type(::nio_flash::Configure_BundleType value) {
  assert(::nio_flash::Configure_BundleType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bundle_type_ = value;
}
inline void Configure_FlashPackage::set_bundle_type(::nio_flash::Configure_BundleType value) {
  _internal_set_bundle_type(value);
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.bundle_type)
}

// optional .nio_flash.Configure.FlashType flash_type = 7;
inline bool Configure_FlashPackage::_internal_has_flash_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_flash_type() const {
  return _internal_has_flash_type();
}
inline void Configure_FlashPackage::clear_flash_type() {
  _impl_.flash_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::nio_flash::Configure_FlashType Configure_FlashPackage::_internal_flash_type() const {
  return static_cast< ::nio_flash::Configure_FlashType >(_impl_.flash_type_);
}
inline ::nio_flash::Configure_FlashType Configure_FlashPackage::flash_type() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.flash_type)
  return _internal_flash_type();
}
inline void Configure_FlashPackage::_internal_set_flash_type(::nio_flash::Configure_FlashType value) {
  assert(::nio_flash::Configure_FlashType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flash_type_ = value;
}
inline void Configure_FlashPackage::set_flash_type(::nio_flash::Configure_FlashType value) {
  _internal_set_flash_type(value);
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.flash_type)
}

// optional bool is_skip = 8 [default = false];
inline bool Configure_FlashPackage::_internal_has_is_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_is_skip() const {
  return _internal_has_is_skip();
}
inline void Configure_FlashPackage::clear_is_skip() {
  _impl_.is_skip_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Configure_FlashPackage::_internal_is_skip() const {
  return _impl_.is_skip_;
}
inline bool Configure_FlashPackage::is_skip() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.is_skip)
  return _internal_is_skip();
}
inline void Configure_FlashPackage::_internal_set_is_skip(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_skip_ = value;
}
inline void Configure_FlashPackage::set_is_skip(bool value) {
  _internal_set_is_skip(value);
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.is_skip)
}

// optional bool is_allow_fail = 9 [default = false];
inline bool Configure_FlashPackage::_internal_has_is_allow_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Configure_FlashPackage::has_is_allow_fail() const {
  return _internal_has_is_allow_fail();
}
inline void Configure_FlashPackage::clear_is_allow_fail() {
  _impl_.is_allow_fail_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Configure_FlashPackage::_internal_is_allow_fail() const {
  return _impl_.is_allow_fail_;
}
inline bool Configure_FlashPackage::is_allow_fail() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.is_allow_fail)
  return _internal_is_allow_fail();
}
inline void Configure_FlashPackage::_internal_set_is_allow_fail(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_allow_fail_ = value;
}
inline void Configure_FlashPackage::set_is_allow_fail(bool value) {
  _internal_set_is_allow_fail(value);
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashPackage.is_allow_fail)
}

// repeated .nio_flash.Configure.FlashFile file_list = 10;
inline int Configure_FlashPackage::_internal_file_list_size() const {
  return _impl_.file_list_.size();
}
inline int Configure_FlashPackage::file_list_size() const {
  return _internal_file_list_size();
}
inline void Configure_FlashPackage::clear_file_list() {
  _impl_.file_list_.Clear();
}
inline ::nio_flash::Configure_FlashFile* Configure_FlashPackage::mutable_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashPackage.file_list)
  return _impl_.file_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashFile >*
Configure_FlashPackage::mutable_file_list() {
  // @@protoc_insertion_point(field_mutable_list:nio_flash.Configure.FlashPackage.file_list)
  return &_impl_.file_list_;
}
inline const ::nio_flash::Configure_FlashFile& Configure_FlashPackage::_internal_file_list(int index) const {
  return _impl_.file_list_.Get(index);
}
inline const ::nio_flash::Configure_FlashFile& Configure_FlashPackage::file_list(int index) const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashPackage.file_list)
  return _internal_file_list(index);
}
inline ::nio_flash::Configure_FlashFile* Configure_FlashPackage::_internal_add_file_list() {
  return _impl_.file_list_.Add();
}
inline ::nio_flash::Configure_FlashFile* Configure_FlashPackage::add_file_list() {
  ::nio_flash::Configure_FlashFile* _add = _internal_add_file_list();
  // @@protoc_insertion_point(field_add:nio_flash.Configure.FlashPackage.file_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashFile >&
Configure_FlashPackage::file_list() const {
  // @@protoc_insertion_point(field_list:nio_flash.Configure.FlashPackage.file_list)
  return _impl_.file_list_;
}

// -------------------------------------------------------------------

// Configure_FlashFile

// optional string type = 1;
inline bool Configure_FlashFile::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Configure_FlashFile::has_type() const {
  return _internal_has_type();
}
inline void Configure_FlashFile::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Configure_FlashFile::type() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashFile.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure_FlashFile::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashFile.type)
}
inline std::string* Configure_FlashFile::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashFile.type)
  return _s;
}
inline const std::string& Configure_FlashFile::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Configure_FlashFile::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure_FlashFile::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure_FlashFile::release_type() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.FlashFile.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure_FlashFile::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.FlashFile.type)
}

// optional string path = 2;
inline bool Configure_FlashFile::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Configure_FlashFile::has_path() const {
  return _internal_has_path();
}
inline void Configure_FlashFile::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Configure_FlashFile::path() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure_FlashFile::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashFile.path)
}
inline std::string* Configure_FlashFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashFile.path)
  return _s;
}
inline const std::string& Configure_FlashFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Configure_FlashFile::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure_FlashFile::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure_FlashFile::release_path() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.FlashFile.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure_FlashFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.FlashFile.path)
}

// optional string hash = 3;
inline bool Configure_FlashFile::_internal_has_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Configure_FlashFile::has_hash() const {
  return _internal_has_hash();
}
inline void Configure_FlashFile::clear_hash() {
  _impl_.hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Configure_FlashFile::hash() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.FlashFile.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure_FlashFile::set_hash(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.FlashFile.hash)
}
inline std::string* Configure_FlashFile::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.FlashFile.hash)
  return _s;
}
inline const std::string& Configure_FlashFile::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void Configure_FlashFile::_internal_set_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure_FlashFile::_internal_mutable_hash() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure_FlashFile::release_hash() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.FlashFile.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure_FlashFile::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.FlashFile.hash)
}

// -------------------------------------------------------------------

// Configure

// optional string target_name = 1;
inline bool Configure::_internal_has_target_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Configure::has_target_name() const {
  return _internal_has_target_name();
}
inline void Configure::clear_target_name() {
  _impl_.target_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Configure::target_name() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.target_name)
  return _internal_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure::set_target_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.target_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.target_name)
}
inline std::string* Configure::mutable_target_name() {
  std::string* _s = _internal_mutable_target_name();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.target_name)
  return _s;
}
inline const std::string& Configure::_internal_target_name() const {
  return _impl_.target_name_.Get();
}
inline void Configure::_internal_set_target_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure::_internal_mutable_target_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure::release_target_name() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.target_name)
  if (!_internal_has_target_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.target_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_.IsDefault()) {
    _impl_.target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_name_.SetAllocated(target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_.IsDefault()) {
    _impl_.target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.target_name)
}

// optional string lib_name = 2;
inline bool Configure::_internal_has_lib_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Configure::has_lib_name() const {
  return _internal_has_lib_name();
}
inline void Configure::clear_lib_name() {
  _impl_.lib_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Configure::lib_name() const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.lib_name)
  return _internal_lib_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configure::set_lib_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.lib_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nio_flash.Configure.lib_name)
}
inline std::string* Configure::mutable_lib_name() {
  std::string* _s = _internal_mutable_lib_name();
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.lib_name)
  return _s;
}
inline const std::string& Configure::_internal_lib_name() const {
  return _impl_.lib_name_.Get();
}
inline void Configure::_internal_set_lib_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lib_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Configure::_internal_mutable_lib_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.lib_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Configure::release_lib_name() {
  // @@protoc_insertion_point(field_release:nio_flash.Configure.lib_name)
  if (!_internal_has_lib_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.lib_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lib_name_.IsDefault()) {
    _impl_.lib_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Configure::set_allocated_lib_name(std::string* lib_name) {
  if (lib_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lib_name_.SetAllocated(lib_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lib_name_.IsDefault()) {
    _impl_.lib_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nio_flash.Configure.lib_name)
}

// repeated .nio_flash.Configure.FlashPackage flash_package = 3;
inline int Configure::_internal_flash_package_size() const {
  return _impl_.flash_package_.size();
}
inline int Configure::flash_package_size() const {
  return _internal_flash_package_size();
}
inline void Configure::clear_flash_package() {
  _impl_.flash_package_.Clear();
}
inline ::nio_flash::Configure_FlashPackage* Configure::mutable_flash_package(int index) {
  // @@protoc_insertion_point(field_mutable:nio_flash.Configure.flash_package)
  return _impl_.flash_package_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashPackage >*
Configure::mutable_flash_package() {
  // @@protoc_insertion_point(field_mutable_list:nio_flash.Configure.flash_package)
  return &_impl_.flash_package_;
}
inline const ::nio_flash::Configure_FlashPackage& Configure::_internal_flash_package(int index) const {
  return _impl_.flash_package_.Get(index);
}
inline const ::nio_flash::Configure_FlashPackage& Configure::flash_package(int index) const {
  // @@protoc_insertion_point(field_get:nio_flash.Configure.flash_package)
  return _internal_flash_package(index);
}
inline ::nio_flash::Configure_FlashPackage* Configure::_internal_add_flash_package() {
  return _impl_.flash_package_.Add();
}
inline ::nio_flash::Configure_FlashPackage* Configure::add_flash_package() {
  ::nio_flash::Configure_FlashPackage* _add = _internal_add_flash_package();
  // @@protoc_insertion_point(field_add:nio_flash.Configure.flash_package)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nio_flash::Configure_FlashPackage >&
Configure::flash_package() const {
  // @@protoc_insertion_point(field_list:nio_flash.Configure.flash_package)
  return _impl_.flash_package_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nio_flash

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nio_flash::Configure_FlashType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nio_flash::Configure_FlashType>() {
  return ::nio_flash::Configure_FlashType_descriptor();
}
template <> struct is_proto_enum< ::nio_flash::Configure_BundleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nio_flash::Configure_BundleType>() {
  return ::nio_flash::Configure_BundleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nio_5fflash_2eproto
